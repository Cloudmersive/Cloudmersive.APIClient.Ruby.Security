=begin
#securityapi

#The security APIs help you detect and block security threats.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module CloudmersiveSecurityApiClient
  # Result of performing an Insecure Deserialization JSON protection operation
  class StringAutomaticThreatDetection
    # True if the operation was successful, false otherwise
    attr_accessor :successful

    attr_accessor :clean_result

    # True if the input contained Insecure Deserialization JSON, false otherwise
    attr_accessor :contained_json_insecure_deserialization_attack

    # True if the input contained XSS attack, false otherwise
    attr_accessor :contained_xss_threat

    # True if the input contained XXE attack, false otherwise
    attr_accessor :contained_xxe_threat

    # True if the input contained SQL Injection attack, false otherwise
    attr_accessor :contained_sql_injection_threat

    # True if the input contained an Server-Side Request Forgery (SSRF) URL attack, false otherwise
    attr_accessor :contained_ssrf_threat

    # True if the input string is XML, false otherwise
    attr_accessor :is_xml

    # True if the input string is JSON, false otherwise
    attr_accessor :is_json

    # True if the input string is a URL, false otherwise
    attr_accessor :is_url

    # Original input string
    attr_accessor :original_input

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'successful' => :'Successful',
        :'clean_result' => :'CleanResult',
        :'contained_json_insecure_deserialization_attack' => :'ContainedJsonInsecureDeserializationAttack',
        :'contained_xss_threat' => :'ContainedXssThreat',
        :'contained_xxe_threat' => :'ContainedXxeThreat',
        :'contained_sql_injection_threat' => :'ContainedSqlInjectionThreat',
        :'contained_ssrf_threat' => :'ContainedSsrfThreat',
        :'is_xml' => :'IsXML',
        :'is_json' => :'IsJSON',
        :'is_url' => :'IsURL',
        :'original_input' => :'OriginalInput'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'successful' => :'BOOLEAN',
        :'clean_result' => :'BOOLEAN',
        :'contained_json_insecure_deserialization_attack' => :'BOOLEAN',
        :'contained_xss_threat' => :'BOOLEAN',
        :'contained_xxe_threat' => :'BOOLEAN',
        :'contained_sql_injection_threat' => :'BOOLEAN',
        :'contained_ssrf_threat' => :'BOOLEAN',
        :'is_xml' => :'BOOLEAN',
        :'is_json' => :'BOOLEAN',
        :'is_url' => :'BOOLEAN',
        :'original_input' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'Successful')
        self.successful = attributes[:'Successful']
      end

      if attributes.has_key?(:'CleanResult')
        self.clean_result = attributes[:'CleanResult']
      end

      if attributes.has_key?(:'ContainedJsonInsecureDeserializationAttack')
        self.contained_json_insecure_deserialization_attack = attributes[:'ContainedJsonInsecureDeserializationAttack']
      end

      if attributes.has_key?(:'ContainedXssThreat')
        self.contained_xss_threat = attributes[:'ContainedXssThreat']
      end

      if attributes.has_key?(:'ContainedXxeThreat')
        self.contained_xxe_threat = attributes[:'ContainedXxeThreat']
      end

      if attributes.has_key?(:'ContainedSqlInjectionThreat')
        self.contained_sql_injection_threat = attributes[:'ContainedSqlInjectionThreat']
      end

      if attributes.has_key?(:'ContainedSsrfThreat')
        self.contained_ssrf_threat = attributes[:'ContainedSsrfThreat']
      end

      if attributes.has_key?(:'IsXML')
        self.is_xml = attributes[:'IsXML']
      end

      if attributes.has_key?(:'IsJSON')
        self.is_json = attributes[:'IsJSON']
      end

      if attributes.has_key?(:'IsURL')
        self.is_url = attributes[:'IsURL']
      end

      if attributes.has_key?(:'OriginalInput')
        self.original_input = attributes[:'OriginalInput']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          successful == o.successful &&
          clean_result == o.clean_result &&
          contained_json_insecure_deserialization_attack == o.contained_json_insecure_deserialization_attack &&
          contained_xss_threat == o.contained_xss_threat &&
          contained_xxe_threat == o.contained_xxe_threat &&
          contained_sql_injection_threat == o.contained_sql_injection_threat &&
          contained_ssrf_threat == o.contained_ssrf_threat &&
          is_xml == o.is_xml &&
          is_json == o.is_json &&
          is_url == o.is_url &&
          original_input == o.original_input
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [successful, clean_result, contained_json_insecure_deserialization_attack, contained_xss_threat, contained_xxe_threat, contained_sql_injection_threat, contained_ssrf_threat, is_xml, is_json, is_url, original_input].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudmersiveSecurityApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
